{"ast":null,"code":"import { createSlice, createSelector, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit';\nimport { client } from '../../api/client';\nimport { StatusFilters } from '../filters/filtersSlice';\nconst todosAdapter = createEntityAdapter();\nconst initialState = todosAdapter.getInitialState({\n  status: 'idle'\n}); // Thunk functions\n\nexport const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {\n  const response = await client.get('/fakeApi/todos');\n  return response.todos;\n});\nexport const saveNewTodo = createAsyncThunk('todos/saveNewTodo', async text => {\n  const initialTodo = {\n    text\n  };\n  const response = await client.post('/fakeApi/todos', {\n    todo: initialTodo\n  });\n  return response.todo;\n});\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    todoToggled(state, action) {\n      const todoId = action.payload;\n      const todo = state.entities[todoId];\n      todo.completed = !todo.completed;\n    },\n\n    todoColorSelected: {\n      reducer(state, action) {\n        const {\n          color,\n          todoId\n        } = action.payload;\n        state.entities[todoId].color = color;\n      },\n\n      prepare(todoId, color) {\n        return {\n          payload: {\n            todoId,\n            color\n          }\n        };\n      }\n\n    },\n    todoDeleted: todosAdapter.removeOne,\n\n    allTodosCompleted(state, action) {\n      Object.values(state.entities).forEach(todo => {\n        todo.completed = true;\n      });\n    },\n\n    completedTodosCleared(state, action) {\n      const completedIds = Object.values(state.entities).filter(todo => todo.completed).map(todo => todo.id);\n      todosAdapter.removeMany(state, completedIds);\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchTodos.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchTodos.fulfilled, (state, action) => {\n      todosAdapter.setAll(state, action.payload);\n      state.status = 'idle';\n    }).addCase(saveNewTodo.fulfilled, todosAdapter.addOne);\n  }\n});\nexport const {\n  allTodosCompleted,\n  completedTodosCleared,\n  todoAdded,\n  todoColorSelected,\n  todoDeleted,\n  todoToggled\n} = todosSlice.actions;\nexport default todosSlice.reducer;\nexport const {\n  selectAll: selectTodos,\n  selectById: selectTodoById\n} = todosAdapter.getSelectors(state => state.todos);\nexport const selectTodoIds = createSelector( // First, pass one or more \"input selector\" functions:\nselectTodos, // Then, an \"output selector\" that receives all the input results as arguments\n// and returns a final result value\ntodos => todos.map(todo => todo.id));\nexport const selectFilteredTodos = createSelector( // First input selector: all todos\nselectTodos, // Second input selector: all filter values\nstate => state.filters, // Output selector: receives both values\n(todos, filters) => {\n  const {\n    status,\n    colors\n  } = filters;\n  const showAllCompletions = status === StatusFilters.All;\n\n  if (showAllCompletions && colors.length === 0) {\n    return todos;\n  }\n\n  const completedStatus = status === StatusFilters.Completed; // Return either active or completed todos based on filter\n\n  return todos.filter(todo => {\n    const statusMatches = showAllCompletions || todo.completed === completedStatus;\n    const colorMatches = colors.length === 0 || colors.includes(todo.color);\n    return statusMatches && colorMatches;\n  });\n});\nexport const selectFilteredTodoIds = createSelector( // Pass our other memoized selector as an input\nselectFilteredTodos, // And derive data in the output selector\nfilteredTodos => filteredTodos.map(todo => todo.id));","map":{"version":3,"sources":["/Users/qizhang/Desktop/westcliff/m6-w2-d2-demo/src/features/todos/todosSlice.js"],"names":["createSlice","createSelector","createAsyncThunk","createEntityAdapter","client","StatusFilters","todosAdapter","initialState","getInitialState","status","fetchTodos","response","get","todos","saveNewTodo","text","initialTodo","post","todo","todosSlice","name","reducers","todoToggled","state","action","todoId","payload","entities","completed","todoColorSelected","reducer","color","prepare","todoDeleted","removeOne","allTodosCompleted","Object","values","forEach","completedTodosCleared","completedIds","filter","map","id","removeMany","extraReducers","builder","addCase","pending","fulfilled","setAll","addOne","todoAdded","actions","selectAll","selectTodos","selectById","selectTodoById","getSelectors","selectTodoIds","selectFilteredTodos","filters","colors","showAllCompletions","All","length","completedStatus","Completed","statusMatches","colorMatches","includes","selectFilteredTodoIds","filteredTodos"],"mappings":"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","sourcesContent":["import {\n  createSlice,\n  createSelector,\n  createAsyncThunk,\n  createEntityAdapter,\n} from '@reduxjs/toolkit'\nimport { client } from '../../api/client'\nimport { StatusFilters } from '../filters/filtersSlice'\n\nconst todosAdapter = createEntityAdapter()\n\nconst initialState = todosAdapter.getInitialState({\n  status: 'idle',\n})\n\n// Thunk functions\nexport const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {\n  const response = await client.get('/fakeApi/todos')\n  return response.todos\n})\n\nexport const saveNewTodo = createAsyncThunk(\n  'todos/saveNewTodo',\n  async (text) => {\n    const initialTodo = { text }\n    const response = await client.post('/fakeApi/todos', { todo: initialTodo })\n    return response.todo\n  }\n)\n\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    todoToggled(state, action) {\n      const todoId = action.payload\n      const todo = state.entities[todoId]\n      todo.completed = !todo.completed\n    },\n    todoColorSelected: {\n      reducer(state, action) {\n        const { color, todoId } = action.payload\n        state.entities[todoId].color = color\n      },\n      prepare(todoId, color) {\n        return {\n          payload: { todoId, color },\n        }\n      },\n    },\n    todoDeleted: todosAdapter.removeOne,\n    allTodosCompleted(state, action) {\n      Object.values(state.entities).forEach((todo) => {\n        todo.completed = true\n      })\n    },\n    completedTodosCleared(state, action) {\n      const completedIds = Object.values(state.entities)\n        .filter((todo) => todo.completed)\n        .map((todo) => todo.id)\n      todosAdapter.removeMany(state, completedIds)\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchTodos.pending, (state, action) => {\n        state.status = 'loading'\n      })\n      .addCase(fetchTodos.fulfilled, (state, action) => {\n        todosAdapter.setAll(state, action.payload)\n        state.status = 'idle'\n      })\n      .addCase(saveNewTodo.fulfilled, todosAdapter.addOne)\n  },\n})\n\nexport const {\n  allTodosCompleted,\n  completedTodosCleared,\n  todoAdded,\n  todoColorSelected,\n  todoDeleted,\n  todoToggled,\n} = todosSlice.actions\n\nexport default todosSlice.reducer\n\nexport const {\n  selectAll: selectTodos,\n  selectById: selectTodoById,\n} = todosAdapter.getSelectors((state) => state.todos)\n\nexport const selectTodoIds = createSelector(\n  // First, pass one or more \"input selector\" functions:\n  selectTodos,\n  // Then, an \"output selector\" that receives all the input results as arguments\n  // and returns a final result value\n  (todos) => todos.map((todo) => todo.id)\n)\n\nexport const selectFilteredTodos = createSelector(\n  // First input selector: all todos\n  selectTodos,\n  // Second input selector: all filter values\n  (state) => state.filters,\n  // Output selector: receives both values\n  (todos, filters) => {\n    const { status, colors } = filters\n    const showAllCompletions = status === StatusFilters.All\n    if (showAllCompletions && colors.length === 0) {\n      return todos\n    }\n\n    const completedStatus = status === StatusFilters.Completed\n    // Return either active or completed todos based on filter\n    return todos.filter((todo) => {\n      const statusMatches =\n        showAllCompletions || todo.completed === completedStatus\n      const colorMatches = colors.length === 0 || colors.includes(todo.color)\n      return statusMatches && colorMatches\n    })\n  }\n)\n\nexport const selectFilteredTodoIds = createSelector(\n  // Pass our other memoized selector as an input\n  selectFilteredTodos,\n  // And derive data in the output selector\n  (filteredTodos) => filteredTodos.map((todo) => todo.id)\n)\n"]},"metadata":{},"sourceType":"module"}