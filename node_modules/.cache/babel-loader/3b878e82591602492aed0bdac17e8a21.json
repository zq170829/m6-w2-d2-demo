{"ast":null,"code":"/* eslint-disable no-unused-vars */\nimport { Server, Model, Factory, hasMany, RestSerializer } from 'miragejs';\nimport faker from 'faker';\nimport seedrandom from 'seedrandom';\nconst IdSerializer = RestSerializer.extend({\n  serializeIds: 'always'\n}); // Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\n\nlet useSeededRNG = false;\nlet rng = seedrandom();\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed');\n  let seedDate;\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString);\n  } else {\n    seedDate = new Date();\n    randomSeedString = seedDate.toISOString();\n    localStorage.setItem('randomTimestampSeed', randomSeedString);\n  }\n\n  rng = seedrandom(randomSeedString);\n  faker.seed(seedDate.getTime());\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(rng() * (max - min + 1)) + min;\n}\n\nconst randomFromArray = array => {\n  const index = getRandomInt(0, array.length - 1);\n  return array[index];\n};\n\nconst todoTemplates = [{\n  base: 'Buy $THING',\n  values: ['milk', 'bread', 'cheese', 'toys']\n}, {\n  base: 'Clean $THING',\n  values: ['house', 'yard', 'bedroom', 'car']\n}, {\n  base: 'Read $THING',\n  values: ['newspaper', 'book', 'email']\n}];\n\nconst generateTodoText = () => {\n  const template = randomFromArray(todoTemplates);\n  const value = randomFromArray(template.values);\n  const text = template.base.replace('$THING', value);\n  return text;\n};\n\nnew Server({\n  routes() {\n    this.namespace = 'fakeApi'; //this.timing = 2000\n\n    this.resource('todos');\n    this.resource('lists');\n    const server = this;\n    this.post('/todos', function (schema, req) {\n      const data = this.normalizedRequestAttrs();\n\n      if (data.text === 'error') {\n        throw new Error('Could not save the todo!');\n      }\n\n      const result = server.create('todo', data);\n      return result;\n    });\n  },\n\n  models: {\n    todo: Model.extend({}),\n    list: Model.extend({\n      todos: hasMany()\n    })\n  },\n  factories: {\n    todo: Factory.extend({\n      id(i) {\n        return Number(i);\n      },\n\n      text() {\n        return generateTodoText();\n      },\n\n      completed() {\n        return false;\n      },\n\n      color() {\n        return '';\n      }\n\n    })\n  },\n  serializers: {\n    todo: IdSerializer.extend({\n      serialize(object, request) {\n        // HACK Mirage keeps wanting to store integer IDs as strings. Always convert them to numbers for now.\n        const numerifyId = todo => {\n          todo.id = Number(todo.id);\n        };\n\n        let json = IdSerializer.prototype.serialize.apply(this, arguments);\n\n        if (json.todo) {\n          numerifyId(json.todo);\n        } else if (json.todos) {\n          json.todos.forEach(numerifyId);\n        }\n\n        return json;\n      }\n\n    }),\n    list: IdSerializer\n  },\n\n  seeds(server) {\n    server.createList('todo', 5);\n  }\n\n});","map":{"version":3,"sources":["/Users/qizhang/Desktop/westcliff/m6-w2-d2-demo/src/api/server.js"],"names":["Server","Model","Factory","hasMany","RestSerializer","faker","seedrandom","IdSerializer","extend","serializeIds","useSeededRNG","rng","randomSeedString","localStorage","getItem","seedDate","Date","toISOString","setItem","seed","getTime","getRandomInt","min","max","Math","ceil","floor","randomFromArray","array","index","length","todoTemplates","base","values","generateTodoText","template","value","text","replace","routes","namespace","resource","server","post","schema","req","data","normalizedRequestAttrs","Error","result","create","models","todo","list","todos","factories","id","i","Number","completed","color","serializers","serialize","object","request","numerifyId","json","prototype","apply","arguments","forEach","seeds","createList"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\n\nimport { Server, Model, Factory, hasMany, RestSerializer } from 'miragejs'\n\nimport faker from 'faker'\nimport seedrandom from 'seedrandom'\n\nconst IdSerializer = RestSerializer.extend({\n  serializeIds: 'always',\n})\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = false\n\nlet rng = seedrandom()\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\n  let seedDate\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString)\n  } else {\n    seedDate = new Date()\n    randomSeedString = seedDate.toISOString()\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\n  }\n\n  rng = seedrandom(randomSeedString)\n  faker.seed(seedDate.getTime())\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(rng() * (max - min + 1)) + min\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1)\n  return array[index]\n}\n\nconst todoTemplates = [\n  { base: 'Buy $THING', values: ['milk', 'bread', 'cheese', 'toys'] },\n  { base: 'Clean $THING', values: ['house', 'yard', 'bedroom', 'car'] },\n  { base: 'Read $THING', values: ['newspaper', 'book', 'email'] },\n]\n\nconst generateTodoText = () => {\n  const template = randomFromArray(todoTemplates)\n  const value = randomFromArray(template.values)\n  const text = template.base.replace('$THING', value)\n  return text\n}\n\nnew Server({\n  routes() {\n    this.namespace = 'fakeApi'\n    //this.timing = 2000\n\n    this.resource('todos')\n    this.resource('lists')\n\n    const server = this\n\n    this.post('/todos', function (schema, req) {\n      const data = this.normalizedRequestAttrs()\n\n      if (data.text === 'error') {\n        throw new Error('Could not save the todo!')\n      }\n\n      const result = server.create('todo', data)\n      return result\n    })\n  },\n  models: {\n    todo: Model.extend({}),\n    list: Model.extend({\n      todos: hasMany(),\n    }),\n  },\n  factories: {\n    todo: Factory.extend({\n      id(i) {\n        return Number(i)\n      },\n      text() {\n        return generateTodoText()\n      },\n      completed() {\n        return false\n      },\n      color() {\n        return ''\n      },\n    }),\n  },\n  serializers: {\n    todo: IdSerializer.extend({\n      serialize(object, request) {\n        // HACK Mirage keeps wanting to store integer IDs as strings. Always convert them to numbers for now.\n        const numerifyId = (todo) => {\n          todo.id = Number(todo.id)\n        }\n        let json = IdSerializer.prototype.serialize.apply(this, arguments)\n\n        if (json.todo) {\n          numerifyId(json.todo)\n        } else if (json.todos) {\n          json.todos.forEach(numerifyId)\n        }\n\n        return json\n      },\n    }),\n    list: IdSerializer,\n  },\n  seeds(server) {\n    server.createList('todo', 5)\n  },\n})\n"]},"metadata":{},"sourceType":"module"}