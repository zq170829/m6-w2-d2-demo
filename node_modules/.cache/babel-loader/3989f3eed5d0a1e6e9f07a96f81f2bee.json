{"ast":null,"code":"var _jsxFileName = \"/Users/qizhang/Desktop/westcliff/m6-w2-d2-demo/src/features/header/Header.js\";\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { saveNewTodo } from '../todos/todosSlice';\n\nconst Header = () => {\n  const [text, setText] = useState('');\n  const [status, setStatus] = useState('idle');\n  const dispatch = useDispatch();\n\n  const handleChange = e => setText(e.target.value);\n\n  const handleKeyDown = async e => {\n    // If the user pressed the Enter key:\n    const trimmedText = text.trim();\n\n    if (e.which === 13 && trimmedText) {\n      // Create and dispatch the thunk function itself\n      setStatus('loading');\n      await dispatch(saveNewTodo(trimmedText)); // And clear out the text input\n\n      setText('');\n      setStatus('idle');\n    }\n  };\n\n  let isLoading = status === 'loading';\n  let placeholder = isLoading ? '' : 'What needs to be done?';\n  let loader = isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"loader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 28\n    }\n  }) : null;\n  return /*#__PURE__*/React.createElement(\"header\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"new-todo\",\n    placeholder: placeholder,\n    value: text,\n    onChange: handleChange,\n    onKeyDown: handleKeyDown,\n    disabled: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }), loader);\n};\n\nexport default Header;","map":{"version":3,"sources":["/Users/qizhang/Desktop/westcliff/m6-w2-d2-demo/src/features/header/Header.js"],"names":["React","useState","useDispatch","saveNewTodo","Header","text","setText","status","setStatus","dispatch","handleChange","e","target","value","handleKeyDown","trimmedText","trim","which","isLoading","placeholder","loader"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,WAAT,QAA4B,qBAA5B;;AAEA,MAAMC,MAAM,GAAG,MAAM;AACnB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,MAAD,CAApC;AACA,QAAMQ,QAAQ,GAAGP,WAAW,EAA5B;;AAEA,QAAMQ,YAAY,GAAIC,CAAD,IAAOL,OAAO,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAAnC;;AAEA,QAAMC,aAAa,GAAG,MAAOH,CAAP,IAAa;AACjC;AACA,UAAMI,WAAW,GAAGV,IAAI,CAACW,IAAL,EAApB;;AACA,QAAIL,CAAC,CAACM,KAAF,KAAY,EAAZ,IAAkBF,WAAtB,EAAmC;AACjC;AACAP,MAAAA,SAAS,CAAC,SAAD,CAAT;AACA,YAAMC,QAAQ,CAACN,WAAW,CAACY,WAAD,CAAZ,CAAd,CAHiC,CAIjC;;AACAT,MAAAA,OAAO,CAAC,EAAD,CAAP;AACAE,MAAAA,SAAS,CAAC,MAAD,CAAT;AACD;AACF,GAXD;;AAaA,MAAIU,SAAS,GAAGX,MAAM,KAAK,SAA3B;AACA,MAAIY,WAAW,GAAGD,SAAS,GAAG,EAAH,GAAQ,wBAAnC;AACA,MAAIE,MAAM,GAAGF,SAAS,gBAAG;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAgC,IAAtD;AAEA,sBACE;AAAQ,IAAA,SAAS,EAAC,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,UADZ;AAEE,IAAA,WAAW,EAAEC,WAFf;AAGE,IAAA,KAAK,EAAEd,IAHT;AAIE,IAAA,QAAQ,EAAEK,YAJZ;AAKE,IAAA,SAAS,EAAEI,aALb;AAME,IAAA,QAAQ,EAAEI,SANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EASGE,MATH,CADF;AAaD,CArCD;;AAuCA,eAAehB,MAAf","sourcesContent":["import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { saveNewTodo } from '../todos/todosSlice'\n\nconst Header = () => {\n  const [text, setText] = useState('')\n  const [status, setStatus] = useState('idle')\n  const dispatch = useDispatch()\n\n  const handleChange = (e) => setText(e.target.value)\n\n  const handleKeyDown = async (e) => {\n    // If the user pressed the Enter key:\n    const trimmedText = text.trim()\n    if (e.which === 13 && trimmedText) {\n      // Create and dispatch the thunk function itself\n      setStatus('loading')\n      await dispatch(saveNewTodo(trimmedText))\n      // And clear out the text input\n      setText('')\n      setStatus('idle')\n    }\n  }\n\n  let isLoading = status === 'loading'\n  let placeholder = isLoading ? '' : 'What needs to be done?'\n  let loader = isLoading ? <div className=\"loader\" /> : null\n\n  return (\n    <header className=\"header\">\n      <input\n        className=\"new-todo\"\n        placeholder={placeholder}\n        value={text}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n        disabled={isLoading}\n      />\n      {loader}\n    </header>\n  )\n}\n\nexport default Header\n"]},"metadata":{},"sourceType":"module"}